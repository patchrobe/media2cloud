AWSTemplateFormatVersion: "2010-09-09"

Description: (SO0050-groundtruth) Media2Cloud - create Amazon SageMaker GroundTruth resources included Amazon Cognito, Amazon Step Functions, Amazon SNS.


#
# Mappings to store fixed value of the solution
#
Mappings:
    Solution:
        Package:
            GTLabeling: "%PKG_GT_LABELING%"
    Function:
        Handler:
            OnLabeling: index.onLabeling
            OnLabelingJobEvent: index.onLabelingJobEvent
    SNS:
        Team:
            DisplayName: M2CTeam

Parameters:
    SolutionId:
        Type: String
        Description: solution ID
    RootStackName:
        Type: String
        Description: used to suffix resources
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    SolutionUuid:
        Type: String
        Description: unique solution uuid
    AnonymousUsage:
        Type: String
        Description: send ananymous usage data
        Default: "No"
        AllowedValues:
          - "No"
          - "Yes"
    S3Bucket:
        Type: String
        Description: solution bucket
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    KeyPrefix:
        Type: String
        Description: solution key prefix
    CustomResourceArn:
        Type: String
        Description: for post-processing
    # S3
    ProxyBucket:
        Type: String
        Description: bucket to store proxies
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    # Iot
    IotTopic:
        Type: String
        Description: to publish/receive Iot messages
    IotHost:
        Type: String
        Description: to publish/receive Iot messages
    SNSTopicArn:
        Type: String
        Description: public status to SNS. Third Party should subscribe to receive the notification.
    RandomizedName:
        Type: String
        Description: randomized name for resource creation
    AwsSdkLayer:
        Type: String
        Description: AWS SDK layer
    CoreLibLayer:
        Type: String
        Description: Core Library layer

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "General Configuration"
                Parameters:
                    - SolutionId
                    - RootStackName
                    - SolutionUuid
                    - AnonymousUsage
                    - S3Bucket
                    - KeyPrefix
                    - CustomResourceArn
                    - AwsSdkLayer
                    - CoreLibLayer
            -
                Label:
                    default: "Created by parent stack"
                Parameters:
                    - ProxyBucket
                    - IotTopic
                    - IotHost
                    - SNSTopicArn
                    - RandomizedName

        ParameterLabels:
            SolutionId:
                default: "Solution ID"
            RootStackName:
                default: "Top Stack Name"
            SolutionUuid:
                default: "UUID"
            AnonymousUsage:
                default: "Anonymous usage"
            S3Bucket:
                default: "Solution Bucket"
            KeyPrefix:
                default: "Solution Key Prefix"
            CustomResourceArn:
                default: "Custom Resource Arn"
            ProxyBucket:
                default: "Proxy Bucket"
            IotTopic:
                default: "Iot Message Topic"
            IotHost:
                default: "Iot Endpoint"
            SNSTopicArn:
                default: "SNS Topic Arn"
            RandomizedName:
                default: "Random Name"
            AwsSdkLayer:
                default: "AWS SDK Layer"
            CoreLibLayer:
                default: "Core Library Layer"

Resources:
    #
    # IAM role for custom labeling pre/post annotation lambda
    #
    PreLabelingExecutionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-gt-annotation"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                                - "logs:GetLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*"

    #
    # lambda function for custom labeling pre/post annotation
    #
    PreLabelingFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-gt-labeling-pre"
            Description: !Sub "(${SolutionId}) GroundTruth pre/post labeling lambda"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 300
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnLabelingJobEvent"
            ]
            Role: !GetAtt PreLabelingExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "GTLabeling"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer

    #
    # IAM role for SageMaker GroundTruth service
    #
    SageMakerServiceRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
                    -
                        id: F38
                        reason: "This wildcard is required by SageMaker Ground Truth. The policy uses StringEquals to limit permission. https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html"
                    -
                        id: F3
                        reason: "This wildcard is required by SageMaker Ground Truth. The policy uses StringEquals to limit permission. https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
                                - "sagemaker.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-gt-statemachine-execution"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## SageMaker
                        -
                            Effect: Allow
                            Action:
                                - "sagemaker:*"
                            Resource: !Join ["", ["*"]]

                        ## Misc.
                        -
                            Effect: Allow
                            Action:
                                - "cognito-idp:DescribeUserPool"
                                - "cognito-idp:DescribeUserPoolClient"
                                - "cognito-idp:ListGroups"
                                - "cognito-idp:ListIdentityProviders"
                                - "cognito-idp:ListUserPoolClients"
                                - "cognito-idp:ListUserPools"
                                - "cognito-idp:ListUsers"
                                - "cognito-idp:ListUsersInGroup"
                                - "groundtruthlabeling:*"
                                - "iam:ListRoles"
                                - "lambda:ListFunctions"
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:DescribeLogStreams"
                                - "logs:GetLogEvents"
                                - "logs:PutLogEvents"
                            Resource: !Join ["", ["*"]]

                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetBucketLocation"
                                - "s3:ListBucket"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}"
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:DeleteObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## Lambda
                        -
                            Effect: "Allow"
                            Action:
                                - "lambda:InvokeFunction"
                            Resource:
                                - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SolutionId}-${RootStackName}-*"

                        ## SNS
                        -
                            Effect: "Allow"
                            Action:
                                - "sns:Publish"
                            Resource: !Ref TeamTopic

                        ## IAM
                        # SageMaker Ground Truth requires wildcard and use StringEquals to limit the access.
                        # https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html
                        -
                            Effect: "Allow"
                            Action:
                                - "iam:PassRole"
                            Resource: !Join ["", ["*"]]
                            Condition:
                                StringEquals:
                                    "iam:PassedToService":
                                        - "sagemaker.amazonaws.com"

    #
    # Cognito User pool
    #
    TeamUserPool:
        Type: AWS::Cognito::UserPool
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: F78
                        reason: "Disable MFA check"
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
                UnusedAccountValidityDays: 7
                InviteMessageTemplate:
                  EmailSubject: "Media2Cloud labeling team login"
                  EmailMessage:
                        "<p>You are invited to join the Media2Cloud labeling team.</p>
                        <p>
                        Username: <strong>{username}</strong><br />
                        Password: <strong>{####}</strong>
                        </p>"
            AliasAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireSymbols: false
                    RequireUppercase: true
            UserPoolName: !Sub "${SolutionId}-${RootStackName}-workteam"
            UserPoolTags:
                SolutionId: !Ref SolutionId

    #
    # Cognito User group
    #
    TeamUserGroup:
        Type: AWS::Cognito::UserPoolGroup
        Properties:
            Description: !Sub "${SolutionId}-${RootStackName} labeling workteam user group"
            GroupName: !Sub "${SolutionId}-${RootStackName}-workteam-group"
            UserPoolId: !Ref TeamUserPool

    #
    # Cognito App client
    #
    TeamAppClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            ClientName: !Sub "${SolutionId}-${RootStackName}-workteam-app"
            ExplicitAuthFlows:
                - "USER_PASSWORD_AUTH"
            GenerateSecret: true
            RefreshTokenValidity: 30
            UserPoolId: !Ref TeamUserPool

    #
    # Teamwork SNS topic
    #
    TeamTopic:
        Type: AWS::SNS::Topic
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W47
                        reason: "SageMaker.CreateWorkteam doesn't support SNS encryption at rest."
        Properties:
            TopicName: !Sub "${SolutionId}-${RootStackName}-team"
            DisplayName: !FindInMap [
                "SNS",
                "Team",
                "DisplayName"
            ]
            # Don't use Kms key here. SageMaker.CreateWorkteam api will fail.
            # KmsMasterKeyId: "alias/aws/sns"

    #
    # Teamwork SNS topic policy
    #
    TeamTopicPolicy:
        Type: AWS::SNS::TopicPolicy
        Properties:
            Topics:
                - !Ref TeamTopic
            PolicyDocument:
                Id: !Sub "${SolutionId}-${RootStackName}-team-topic-policy"
                Version: "2012-10-17"
                Statement:
                    -
                        Sid: "sagemaker-gt-private-workforce"
                        Effect: "Allow"
                        Action:
                            - "sns:Publish"
                        Resource: !Ref TeamTopic
                        Principal:
                            Service:
                                - "sagemaker.amazonaws.com"
                                - "lambda.amazonaws.com"

    #
    # custom resource to create work team
    #
    ConfigureWorkteam:
        Type: Custom::ConfigureWorkteam
        DependsOn:
            - TeamTopicPolicy
        Properties:
            ServiceToken: !Ref CustomResourceArn
            FunctionName: ConfigureWorkteam
            SolutionId: !Ref SolutionId
            StackName: !Ref RootStackName
            UserPool: !Ref TeamUserPool
            UserGroup: !Ref TeamUserGroup
            AppClientId: !Ref TeamAppClient
            TopicArn: !Ref TeamTopic
            UserPoolDomain: !Ref RandomizedName

    #
    # IAM service role for state machine to invoke state's lambda
    #
    StateMachineServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -
                    Effect: "Allow"
                    Action:
                        - "sts:AssumeRole"
                    Principal:
                        Service:
                            - !Sub "states.${AWS::Region}.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-gt-statemachine-service-role"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "lambda:InvokeFunction"
                                Resource:
                                    - !GetAtt OnGroundTruthFunction.Arn

    #
    # IAM role/policy to grant resource accesses to state machine lambdas
    #
    StateMachineExecutionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-gt-statemachine-execution"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:ListBucket"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}"
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:PutObjectAcl"
                                - "s3:PutObjectVersionAcl"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                                - "logs:GetLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*"

                        ## DynamoDB
                        -
                            Effect: "Allow"
                            Action:
                                - "dynamodb:DeleteItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateItem"
                                - "dynamodb:Attributes"
                                - "dynamodb:LeadingKeys"
                                - "dynamodb:ReturnConsumedCapacity"
                                - "dynamodb:ReturnValues"
                                - "dynamodb:Select"
                            # state machine lambda does have read/write/delete accesses to Asset and Mediainfo tables
                            Resource:
                                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-*"

                        ## IoT
                        -
                            Effect: "Allow"
                            Action:
                                - "iot:Publish"
                            Resource:
                                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IotTopic}"

                        ## SNS (TeamTopic)
                        -
                            Effect: "Allow"
                            Action: "sns:Publish"
                            Resource: !Ref TeamTopic

                        ## SNS (M2C Topic)
                        -
                            Effect: "Allow"
                            Action: "sns:Publish"
                            Resource: !Ref SNSTopicArn

                        ## Rekognition (collection)
                        -
                            Effect: "Allow"
                            Action:
                                - "rekognition:CreateCollection"
                                - "rekognition:DeleteCollection"
                                - "rekognition:DeleteFaces"
                                - "rekognition:IndexFaces"
                                - "rekognition:ListFaces"
                                - "rekognition:SearchFaces"
                            Resource:
                                - !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/*"

                        ## GroundTruth (SageMaker)
                        -
                            Effect: "Allow"
                            Action:
                                - "sagemaker:AddTags"
                            Resource:
                                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
                        -
                            Effect: "Allow"
                            Action:
                                - "sagemaker:CreateLabelingJob"
                                - "sagemaker:DescribeLabelingJob"
                                - "sagemaker:StopLabelingJob"
                            Resource:
                                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:labeling-job/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "sagemaker:CreateWorkteam"
                                - "sagemaker:DescribeWorkteam"
                                - "sagemaker:ListWorkteams"
                                - "sagemaker:UpdateWorkteam"
                            Resource:
                                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:workteam/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "sagemaker:ListLabelingJobs"
                                - "sagemaker:ListLabelingJobForWorkteam"
                            # widcard presented here per sagemaker doc
                            # https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html
                            Resource: !Join ["", ["*"]]

                        ## Cognito for GroundTruth workteam
                        -
                            Effect: "Allow"
                            Action:
                                - "cognito-idp:DescribeUserPool"
                                - "cognito-idp:DescribeUserPoolClient"
                                - "cognito-idp:UpdateUserPool"
                                - "cognito-idp:UpdateUserPoolClient"
                                - "cognito-idp:ListUsersInGroup"
                            Resource:
                                - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TeamUserPool}"

                        ## IAM pass role for GroundTruth workteam
                        -
                            Effect: "Allow"
                            Action:
                                - "iam:PassRole"
                            Resource:
                                - !GetAtt SageMakerServiceRole.Arn

    #
    # GroundTruth State machine lambda function
    #
    OnGroundTruthFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-gt-labeling"
            Description: !Sub "(${SolutionId}) Create and monitor SageMaker GroundTruth labeling job"
            Runtime: nodejs10.x
            MemorySize: 512
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnLabeling"
            ]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "GTLabeling"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    ENV_SAGEMAKER_ROLE_ARN: !GetAtt SageMakerServiceRole.Arn
                    ENV_GROUNDTRUTH_LAMBDA_ARN: !GetAtt PreLabelingFunction.Arn
                    ENV_GROUNDTRUTH_WORKTEAM: !GetAtt ConfigureWorkteam.TeamArn
                    ENV_GROUNDTRUTH_TEAM_TOPIC_ARN: !Ref TeamTopic

    #
    # GroundTruth State machine to create and monitor labeling job
    #
    GroundTruthStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-gt-labeling"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "Create SageMaker Ground Truth custom labeling job and index the results",
                            "StartAt": "Sanity check",
                            "States": {
                                "Sanity check": {
                                    "Type": "Pass",
                                    "Result": "create-dataset",
                                    "ResultPath": "$.operation",
                                    "Next": "Create dataset"
                                },
                                "Create dataset": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "No dataset?",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Dataset error"
                                        }
                                    ]
                                },
                                "Dataset error": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "Fail"
                                },
                                "No dataset?": {
                                    "Type": "Choice",
                                    "Choices": [
                                        {
                                            "Variable": "$.status",
                                            "StringEquals": "NO_DATA",
                                            "Next": "Completed"
                                        }
                                    ],
                                    "Default": "Create labeling job"
                                },
                                "Create labeling job": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "create-labeling-job",
                                        "uuid.$": "$.uuid",
                                        "status": "NOT_STARTED",
                                        "progress": 0,
                                        "input.$": "$.next"
                                    },
                                    "Next": "Wait for labeling",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Labeling error"
                                        }
                                    ]
                                },
                                "Wait for labeling": {
                                    "Type": "Wait",
                                    "Seconds": 180,
                                    "Next": "Check labeling status"
                                },
                                "Check labeling status": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "check-labeling-status",
                                        "uuid.$": "$.uuid",
                                        "status.$": "$.status",
                                        "progress.$": "$.progress",
                                        "input.$": "$.next"
                                    },
                                    "Next": "Job complete?",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 6,
                                            "BackoffRate": 1.1
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Labeling error"
                                        }
                                    ]
                                },
                                "Job complete?": {
                                    "Type": "Choice",
                                    "Choices": [
                                        {
                                            "Variable": "$.status",
                                            "StringEquals": "COMPLETED",
                                            "Next": "Index results"
                                        }
                                    ],
                                    "Default": "Wait for labeling"
                                },
                                "Labeling error": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "Fail"
                                },
                                "Index results": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "index-results",
                                        "uuid.$": "$.uuid",
                                        "status": "NOT_STARTED",
                                        "progress": "0",
                                        "input.$": "$.next"
                                    },
                                    "Next": "Completed",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Indexing error"
                                        }
                                    ]
                                },
                                "Indexing error": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "Fail"
                                },
                                "Fail": {
                                    "Type": "Fail"
                                },
                                "Completed": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "job-completed",
                                        "uuid.$": "$.uuid",
                                        "status.$": "$.status",
                                        "progress.$": "$.progress",
                                        "input.$": "$.next"
                                    },
                                    "End": true
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt OnGroundTruthFunction.Arn
                        }

Outputs:
    ## GroundTruth Pre/Post Labeling
    PreLabelingExecutionRoleArn:
        Value: !GetAtt PreLabelingExecutionRole.Arn
        Description: Role Arn (GroundTruth PreLabeling lambda)
    PreLabelingArn:
        Value: !GetAtt PreLabelingFunction.Arn
        Description: Lambda Arn (GroundTruth PreLabeling lambda)

    ## Cognito related
    CognitoUserPoolId:
        Value: !Ref TeamUserPool
        Description: "User Pool ID (GroundTruth Workteam)"
    CognitoUserPoolArn:
        Value: !GetAtt TeamUserPool.Arn
        Description: "User Pool Arn (GroundTruth Workteam)"
    CognitoUserPoolProviderName:
        Value: !GetAtt TeamUserPool.ProviderName
        Description: "User Pool Provider Name (GroundTruth Workteam)"
    CognitoUserGroupId:
        Value: !Ref TeamUserGroup
        Description: "User Group ID (GroundTruth Workteam)"
    CognitoAppClientId:
        Value: !Ref TeamAppClient
        Description: "App Client ID (GroundTruth Workteam)"

    ## SNS related
    TeamTopicName:
        Value: !GetAtt TeamTopic.TopicName
        Description: Topic Name (Workteam SNS)
    TeamTopicArn:
        Value: !Ref TeamTopic
        Description: Topic Arn (Workteam SNS)

    ## Custom Resource related
    TeamUserPool:
        Value: !GetAtt ConfigureWorkteam.UserPool
        Description: Actual User Pool (GroundTruth Private Workteam)
    TeamClientId:
        Value: !GetAtt ConfigureWorkteam.ClientId
        Description: Actual App Client Id (GroundTruth Private Workteam)
    TeamUserGroup:
        Value: !GetAtt ConfigureWorkteam.UserGroup
        Description: Actual User Group (GroundTruth Private Workteam)
    TeamName:
        Value: !GetAtt ConfigureWorkteam.TeamName
        Description: Team Name (GroundTruth Private Workteam)
    TeamArn:
        Value: !GetAtt ConfigureWorkteam.TeamArn
        Description: Team Arn (GroundTruth Private Workteam)

    ## Step Functions
    SageMakerServiceRoleArn:
        Value: !GetAtt SageMakerServiceRole.Arn
        Description: Role Arn (GroundTruth Custom Label Service)
    ServiceRoleArn:
        Value: !GetAtt StateMachineServiceRole.Arn
        Description: Role Arn (State Machine Service)
    ExecutionRoleArn:
        Value: !GetAtt StateMachineExecutionRole.Arn
        Description: Role Arn (State Machine Lambda Execution)
    OnGroundTruthArn:
        Value: !GetAtt OnGroundTruthFunction.Arn
        Description: Lambda Arn (OnGroundTruthFunction)
    StateMachineArn:
        Value: !Ref GroundTruthStateMachine
        Description: State Machine Arn (GroundTruth)
    StateMachineName:
        Value: !GetAtt GroundTruthStateMachine.Name
        Description: State Machine Name (GroundTruth)
