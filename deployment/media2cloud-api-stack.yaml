AWSTemplateFormatVersion: "2010-09-09"

Description: (SO0050-api) Media2Cloud - create API Gateway endpoint for frontend web client.

Mappings:
    Solution:
        Package:
            API: "%PKG_API%"
    Function:
        Handler:
            OnRequest: index.onRequest
    UserDefined:
        # The solution creates a CloudWatch Log IAM role automatically to allow API Gateway to log
        # endpoint access. If you already configured API Gateway CloudWatch logs, set
        # 'CreateCloudWatchRole' to 'false'. Otherwise, the solution overwrites your existing
        # settings. For details why a IAM role is needed, see
        # https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-cloudwatch-logs/
        APIGateway:
            CreateCloudWatchRole: true

Parameters:
    SolutionId:
        Type: String
        Description: "part of the resource naming"
    RootStackName:
        Type: String
        Description: "part of the resource naming"
    SolutionUuid:
        Type: String
        Description: unique solution uuid
    AnonymousUsage:
        Type: String
        Description: send ananymous usage data
        Default: "No"
        AllowedValues:
          - "No"
          - "Yes"
    S3Bucket:
        Type: String
        Description: solution bucket
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    KeyPrefix:
        Type: String
        Description: solution key prefix
    ApiGatewayEndpointName:
        Type: String
        Description: "API Gateway Name"
    StageName:
        Type: String
        Description: "Leave it as is"
        Default: demo
    IngestStateMachine:
        Type: String
        Description: "created by parent stack"
    AnalysisStateMachine:
        Type: String
        Description: "created by parent stack"
    IotThingPolicy:
        Type: String
        Description: "created by parent stack"
    GroundTruthStateMachine:
        Type: String
        Description: "created by parent stack"
    GroundTruthTeamName:
        Type: String
        Description: "created by parent stack"
    GroundTruthTeamUserPool:
        Type: String
        Description: "created by parent stack"
    GroundTruthTeamTopicName:
        Type: String
        Description: "created by parent stack"
    IotHost:
        Type: String
        Description: Iot host
    IotTopic:
        Type: String
        Description: Iot topic
    LanguageCode:
        Type: String
        Description: Language code
    AIOptions:
        Type: String
        Description: AI Options
    FaceCollectionId:
        Type: String
        Description: default face collection id
    CustomVocabulary:
        Type: String
        Description: default custom vocabulary name
    MinConfidence:
        Type: Number
        Description: default min. confidence level
        MinValue: 55
        MaxValue: 99
    AwsSdkLayer:
        Type: String
        Description: AWS SDK layer
    CoreLibLayer:
        Type: String
        Description: Core Library layer
    GSIIndexName:
        Type: String
        Description: GSI Index name
    IngestBucket:
        Type: String
        Description: "assets automatically transition to Glacier storage"
        AllowedPattern: "[a-z][a-z0-9-_]*"
    ProxyBucket:
        Type: String
        Description: "stores proxy files"
        AllowedPattern: "[a-z][a-z0-9-_]*"
    ElasticsearchDomainName:
        Type: String
        Description: created by search-engine stack
    ElasticsearchDomainEndpoint:
        Type: String
        Description: created by search-engine stack
    ElasticsearchDomainIndexName:
        Type: String
        Description: created by search-engine stack

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: Solution Configuration
                Parameters:
                    - SolutionId
                    - RootStackName
                    - SolutionUuid
                    - AnonymousUsage
                    - S3Bucket
                    - KeyPrefix
            -
                Label:
                    default: Created by other stacks
                Parameters:
                    - IngestStateMachine
                    - AnalysisStateMachine
                    - IotThingPolicy
                    - GroundTruthStateMachine
                    - GroundTruthTeamName
                    - GroundTruthTeamUserPool
                    - GroundTruthTeamTopicName
                    - IotHost
                    - IotTopic
                    - LanguageCode
                    - AIOptions
                    - FaceCollectionId
                    - CustomVocabulary
                    - MinConfidence
                    - AwsSdkLayer
                    - CoreLibLayer
                    - GSIIndexName
                    - IngestBucket
                    - ProxyBucket
                    - ElasticsearchDomainName
                    - ElasticsearchDomainEndpoint
                    - ElasticsearchDomainIndexName
            -
                Label:
                    default: API Gateway Configuration
                Parameters:
                    - ApiGatewayEndpointName
                    - StageName
        ParameterLabels:
            SolutionId:
                default: "Solution Id"
            RootStackName:
                default: "Top Stack Name"
            SolutionUuid:
                default: "UUID"
            AnonymousUsage:
                default: "Anonymous usage"
            S3Bucket:
                default: "Solution Bucket"
            KeyPrefix:
                default: "Solution Key Prefix"
            IngestStateMachine:
                default: "Ingest State Machine Name"
            AnalysisStateMachine:
                default: "Metadata State Machine Name"
            IotThingPolicy:
                default: "Iot Thing Policy"
            ApiGatewayEndpointName:
                default: "API Gateway Name"
            StageName:
                default: "Deployment Stage"
            GroundTruthStateMachine:
                default: "GroundTruth State Machine Name"
            GroundTruthTeamName:
                default: "GroundTruth Team Name"
            GroundTruthTeamUserPool:
                default: "GroundTruth Team User Pool"
            GroundTruthTeamTopicName:
                default: "GroundTruth Team Topic Name"
            IotHost:
                default: "IoT Host"
            IotTopic:
                default: "IoT Topic"
            LanguageCode:
                default: "Default language code"
            AIOptions:
                default: "Default AI options"
            FaceCollectionId:
                default: "Rekognition collection Id"
            CustomVocabulary:
                default: "Transcribe vocabulary name"
            MinConfidence:
                default: "Minimum Confidence"
            AwsSdkLayer:
                default: "AWS SDK Layer"
            CoreLibLayer:
                default: "Core Library Layer"
            GSIIndexName:
                default: "Global Secondary Index"
            IngestBucket:
                default: "Ingest Bucket"
            ProxyBucket:
                default: "Proxy Bucket"
            ElasticsearchDomainName:
                default: "ES Domain Name"
            ElasticsearchDomainEndpoint:
                default: "ES Domain Endpoint"
            ElasticsearchDomainIndexName:
                default: "ES Index Name"

Conditions:
    bCreateCloudWatchRole: !Equals [
        !FindInMap [
            "UserDefined",
            "APIGateway",
            "CreateCloudWatchRole"
        ],
        true
    ]

Resources:
    ExecutionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present because we are attaching Cognito Identity Id. cert/* and thinggroup/* resources won't work!"
        Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
                  Action:
                    - "sts:AssumeRole"
            Path: /
            Policies:
              -
                PolicyName: !Sub ${SolutionId}-${RootStackName}-api
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        # step functions - allow api to start, stop state machine
                        -
                            Effect: "Allow"
                            Action:
                                - "states:DescribeStateMachine"
                                - "states:StartExecution"
                            Resource:
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${IngestStateMachine}"
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AnalysisStateMachine}"
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${GroundTruthStateMachine}"
                        -
                            Effect: "Allow"
                            Action:
                                - "states:DescribeExecution"
                                - "states:StopExecution"
                            Resource:
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${IngestStateMachine}:*"
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${AnalysisStateMachine}:*"
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${GroundTruthStateMachine}:*"

                        # logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        # Iot - allow api to attach iot policy to current cognito user
                        -
                            Effect: "Allow"
                            Action:
                                - "iot:AttachPolicy"
                            # This wildcard is present because we are attaching Cognito Identity Id
                            # cert/* and thinggroup/* resources won't work!
                            # resource. See details on https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awsiot.html
                            Resource:
                                - !Join ["", ["*"]]

                        # Rekognition - for face index to collections
                        -
                            Effect: "Allow"
                            Action:
                                - "rekognition:CreateCollection"
                                - "rekognition:DeleteCollection"
                                - "rekognition:DeleteFaces"
                                - "rekognition:DescribeCollection"
                                - "rekognition:IndexFaces"
                                - "rekognition:ListFaces"
                                - "rekognition:SearchFaces"
                                - "rekognition:SearchFacesByImage"
                            # This wildcard is present as Collection Id is not known.
                            # https://docs.aws.amazon.com/rekognition/latest/dg/api-permissions-reference.html
                            Resource:
                                - !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "rekognition:ListCollections"
                            # This wildcard is present as Collection is not known.
                            # https://docs.aws.amazon.com/rekognition/latest/dg/api-permissions-reference.html
                            Resource:
                                - !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:*"

                        # DynamoDB - read/write/delete access to Ingest, Analysis, IndexedFaces, and QueuedFaces tables
                        -
                            Effect: "Allow"
                            Action:
                                - "dynamodb:DeleteItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateItem"
                                - "dynamodb:Attributes"
                                - "dynamodb:LeadingKeys"
                                - "dynamodb:ReturnConsumedCapacity"
                                - "dynamodb:ReturnValues"
                                - "dynamodb:Select"
                            Resource:
                                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-*"
                        # check object exist on ingest bucket
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${IngestBucket}/*"
                        # list objects on proxy bucket only
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:ListBucket"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}"
                        # S3 - upload face objects. also allows API to delete object on proxy bucket
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:DeleteObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        # SageMaker - describe private workteam
                        -
                            Effect: "Allow"
                            Action:
                                - "sagemaker:DescribeWorkteam"
                            Resource:
                                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:workteam/*"

                        # Cognito - allow API to create, delete, and list users from GT Cognito UserPool
                        -
                            Effect: "Allow"
                            Action:
                                - "cognito-idp:ListUsersInGroup"
                                - "cognito-idp:AdminAddUserToGroup"
                                - "cognito-idp:AdminCreateUser"
                                - "cognito-idp:AdminDeleteUser"
                                - "cognito-idp:AdminRemoveUserFromGroup"
                            Resource:
                                - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${GroundTruthTeamUserPool}"

                        # SNS - allow API to subscribe and unsubscribe team member
                        -
                            Effect: "Allow"
                            Action:
                                - "sns:ListSubscriptionsByTopic"
                                - "sns:Subscribe"
                            Resource:
                                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${GroundTruthTeamTopicName}"
                        -
                            # sns.Unsubscribe must use wildcard in Resource
                            Effect: "Allow"
                            Action: "sns:Unsubscribe"
                            Resource: !Join ["", ["*"]]

                        ## Elasticsearch
                        -
                            Effect: "Allow"
                            Action:
                                - "es:ESHttpGet"
                                - "es:ESHttpPost"
                                - "es:ESHttpPut"
                                - "es:ESHttpPost"
                                - "es:ESHttpDelete"
                            Resource:
                                # Wildcards on ElasticSearch domain resources are
                                # present because documents are indexed based off of
                                # the Step Function job ID, which is unique per
                                # invocation.
                                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}"
                                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/*"


    #
    # (Metadata State machine) lambda function to monitor media analysis state machine
    #
    OnRequestFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-api"
            Description: !Sub "(${SolutionId}) Handle POST, GET, OPTION requests"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 300
            Handler: !FindInMap ["Function", "Handler", "OnRequest"]
            Role: !GetAtt ExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "API"]}]
            Layers: [
                !Ref AwsSdkLayer,
                !Ref CoreLibLayer
            ]
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_IOT_THING_POLICY_NAME: !Ref IotThingPolicy
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_WORKTEAM_NAME: !Ref GroundTruthTeamName
                    ENV_GSI_INDEX_NAME: !Ref GSIIndexName
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    ApiLogAccessRole:
        Type: AWS::IAM::Role
        Condition: bCreateCloudWatchRole
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: "apigateway.amazonaws.com"
                        Action: "sts:AssumeRole"
            Path: /
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

    ApiAccount:
        Type: AWS::ApiGateway::Account
        Condition: bCreateCloudWatchRole
        Properties:
            CloudWatchRoleArn: !GetAtt ApiLogAccessRole.Arn

    RestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Description: !Sub "(${SolutionId}) API endpoints to start and get state machines"
            Body:
                swagger: "2.0"
                info:
                    version: "2018-08-03T20:13:00Z"
                    title: !Sub "${ApiGatewayEndpointName}"
                basePath: !Sub "/${StageName}"
                schemes:
                    - "https"
                paths:
                    /{operation}:
                        get:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        delete:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        post:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        options:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                    /{operation}/{uuid+}:
                        get:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "uuid"
                                    in: "path"
                                    required: true
                                    type: "string"
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        delete:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "uuid"
                                    in: "path"
                                    required: true
                                    type: "string"
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        post:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "uuid"
                                    in: "path"
                                    required: true
                                    type: "string"
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        options:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "uuid"
                                    in: "path"
                                    required: true
                                    type: "string"
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                uri: !Sub [
                                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${x0}/invocations",
                                    { x0: !GetAtt OnRequestFunction.Arn }
                                ]
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                securityDefinitions:
                    sigv4:
                        type: "apiKey"
                        name: "Authorization"
                        in: "header"
                        x-amazon-apigateway-authtype: "awsSigv4"
                definitions:
                    Empty:
                        type: "object"
                        title: "Empty Schema"

    Deployment:
        Type: AWS::ApiGateway::Deployment
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W68
                        reason: "suppress UsagePlan requirement"
        Properties:
            Description: !Sub "(${SolutionId}) Created by ${RootStackName}"
            RestApiId: !Ref RestApi
            StageName: !Ref StageName
            StageDescription:
                Description: !If [
                    bCreateCloudWatchRole,
                    !Sub "$(${SolutionId}) ${ApiAccount} created by ${RootStackName}",
                    !Sub "(${SolutionId}) Created by ${RootStackName}"
                ]
                LoggingLevel: ERROR
                AccessLogSetting:
                    DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/media2cloud/api/${RootStackName}/${RestApi}/${StageName}"
                    Format: "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.resourcePath $context.protocol\" $context.status $context.responseLength $context.requestId"
                MethodSettings:
                    -
                        ResourcePath: /~1{operation}
                        HttpMethod: GET
                        DataTraceEnabled: true
                        LoggingLevel: ERROR
                    -
                        ResourcePath: /~1{operation}
                        HttpMethod: POST
                        DataTraceEnabled: true
                        LoggingLevel: INFO
                    -
                        ResourcePath: /~1{operation}
                        HttpMethod: DELETE
                        DataTraceEnabled: true
                        LoggingLevel: INFO
                    -
                        ResourcePath: /~1{operation}~1{uuid+}
                        HttpMethod: GET
                        DataTraceEnabled: true
                        LoggingLevel: ERROR
                    -
                        ResourcePath: /~1{operation}~1{uuid+}
                        HttpMethod: POST
                        DataTraceEnabled: true
                        LoggingLevel: INFO
                    -
                        ResourcePath: /~1{operation}~1{uuid+}
                        HttpMethod: DELETE
                        DataTraceEnabled: true
                        LoggingLevel: INFO

    # lambda permission for HTTP command for {operation} and {uuid+} path parameters
    DELETEOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/DELETE/*"

    GETOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/GET/*"

    OPTIONSOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/OPTIONS/*"

    POSTOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/POST/*"

    DELETEUuid:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/DELETE/*/*"

    GETUuid:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/GET/*/*"

    OPTIONSUuid:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/OPTIONS/*/*"

    POSTUuid:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt OnRequestFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${StageName}/POST/*/*"

Outputs:
    ApiId:
        Value: !Ref RestApi
        Description: API Id

    Endpoint:
        Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
        Description: API Endpoint

    FunctionName:
        Value: !Ref OnRequestFunction
        Description: Function Name (OnRequestFunction)

    FunctionArn:
        Value: !GetAtt OnRequestFunction.Arn
        Description: Function Arn (OnRequestFunction)
